// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/queries/accounting/query_accounting.proto

package accounting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QueryAccounting_GetBalance_FullMethodName     = "/queries.accounting.QueryAccounting/GetBalance"
	QueryAccounting_GetWithdrawals_FullMethodName = "/queries.accounting.QueryAccounting/GetWithdrawals"
)

// QueryAccountingClient is the client API for QueryAccounting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryAccountingClient interface {
	GetBalance(ctx context.Context, in *GetBalanceParams, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	GetWithdrawals(ctx context.Context, in *GetWithdrawalsParams, opts ...grpc.CallOption) (*GetWithdrawalsResponse, error)
}

type queryAccountingClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryAccountingClient(cc grpc.ClientConnInterface) QueryAccountingClient {
	return &queryAccountingClient{cc}
}

func (c *queryAccountingClient) GetBalance(ctx context.Context, in *GetBalanceParams, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, QueryAccounting_GetBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryAccountingClient) GetWithdrawals(ctx context.Context, in *GetWithdrawalsParams, opts ...grpc.CallOption) (*GetWithdrawalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWithdrawalsResponse)
	err := c.cc.Invoke(ctx, QueryAccounting_GetWithdrawals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryAccountingServer is the server API for QueryAccounting service.
// All implementations must embed UnimplementedQueryAccountingServer
// for forward compatibility.
type QueryAccountingServer interface {
	GetBalance(context.Context, *GetBalanceParams) (*GetBalanceResponse, error)
	GetWithdrawals(context.Context, *GetWithdrawalsParams) (*GetWithdrawalsResponse, error)
	mustEmbedUnimplementedQueryAccountingServer()
}

// UnimplementedQueryAccountingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryAccountingServer struct{}

func (UnimplementedQueryAccountingServer) GetBalance(context.Context, *GetBalanceParams) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedQueryAccountingServer) GetWithdrawals(context.Context, *GetWithdrawalsParams) (*GetWithdrawalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawals not implemented")
}
func (UnimplementedQueryAccountingServer) mustEmbedUnimplementedQueryAccountingServer() {}
func (UnimplementedQueryAccountingServer) testEmbeddedByValue()                         {}

// UnsafeQueryAccountingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryAccountingServer will
// result in compilation errors.
type UnsafeQueryAccountingServer interface {
	mustEmbedUnimplementedQueryAccountingServer()
}

func RegisterQueryAccountingServer(s grpc.ServiceRegistrar, srv QueryAccountingServer) {
	// If the following call pancis, it indicates UnimplementedQueryAccountingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QueryAccounting_ServiceDesc, srv)
}

func _QueryAccounting_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAccountingServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAccounting_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAccountingServer).GetBalance(ctx, req.(*GetBalanceParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryAccounting_GetWithdrawals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawalsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAccountingServer).GetWithdrawals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryAccounting_GetWithdrawals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAccountingServer).GetWithdrawals(ctx, req.(*GetWithdrawalsParams))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryAccounting_ServiceDesc is the grpc.ServiceDesc for QueryAccounting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryAccounting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "queries.accounting.QueryAccounting",
	HandlerType: (*QueryAccountingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalance",
			Handler:    _QueryAccounting_GetBalance_Handler,
		},
		{
			MethodName: "GetWithdrawals",
			Handler:    _QueryAccounting_GetWithdrawals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/queries/accounting/query_accounting.proto",
}
